some features should not be in production YET

BUT we want to not have long lived feature branches (because merging is terrible if someone refactors or makes cross-cutting changes)

SO we have to do (something)

--

Use a feature flag! (toggle)
To prevent the new code execution path from being used (executed)


--

Types of flags/toggles

- very temporary (only while a new feature is being developed, to enable developer workflow) OR long-lasting (many reasons - to be continues)
- When the state of the flag can be changed (runtime or deploy/restart -time)
- What level of granularity the flag controls
-- application-wide OR user-specific (maybe with groups of users!)

--

Where do you keep them?
- config file (deploy-time)
- database/datastore (runtime enablement)

--

How do you change them?

- JMX!! (reduce chance of unauthorized UI/external access)
- Someone runs a sql insert
- [DANGER] Admin-only console for your Product team

--

User-specific feature flags/toggles
- gradual rollout (trusted partners first)
- load testing (forgot an index?)
- Automatic enablement of server-side geature on iOS/Android app upgrade

--

Reasons for long-lasting feature toggles
<p>
increase developer pain :(
</p><p>frequent gradual rollout, rollback
</p><p>Many client versions (iOS/Android) in the wild that can/not support different features
</p><p>DANGER: combinatorial explosion of testing complexity if any of these features impact each other
</p><p>DANGER: are you accidentally using it as a user/admin permissions system?

--

[DANGER] accidentally using feature flags as a user/admin permissions system
- charging $$ per feature
- A/B testing (how do you get meaningful metrics?)
- features for internal users only (i.e. roles)

--

[DANGER] (feature) enablement vs (user) setting (the user configuring their usage of the feature)
Once a feature is enabled, a user can configure it. What do you do with the configuration if the feature is turned off again? Keep it? Delete it? What if the configuration options mean different things when you turn the feature back on again?

--


Actual Code
Ruby
github.com/FetLife/rollout
github.com/jnunemaker/flipper

Java
https://github.com/clun/ff4j (also does permissions- do you really want these to be managed in the same place?)
https://github.com/togglz/togglz

Above and beyond:
https://github.com/github/scientist

http://martinfowler.com/articles/feature-toggles.html


--

Lessons learned
(Over and over and over)
Requirements evolve! Use evolutionary design. The first thing is rarely the right thing.


--

Lessons Learned
How do you migrate features between feature toggle systems? How do you test the migration? Backfills and intermediate comparison formats! (CSV)

---

Lessons Learned
Deploy strategy: how do you feature toggle the feature toggle feature?

combine thanks and references


